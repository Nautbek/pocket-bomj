package main

import (
	"fmt"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"github.com/sirupsen/logrus"
	"pocket-bomj/src/bomj"
)

var (
	bot     *tgbotapi.BotAPI
	storage *bomj.Storage
	logger  *logrus.Logger
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
	logger = logrus.New()
	logger.SetLevel(logrus.InfoLevel)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if err := godotenv.Load(); err != nil {
		logger.Warn("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		logger.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
	var err error
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		logger.Fatal(err)
	}

	bot.Debug = false
	logger.Infof("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	storage = bomj.NewStorage()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := bot.GetUpdatesChan(updateConfig)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for update := range updates {
		if update.Message == nil {
			continue
		}

		go handleMessage(update.Message)
	}
}

func handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	text := message.Text

	logger.Infof("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %d: %s", userID, text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–º–∂
	if !storage.HasBomj(userID) {
		// –ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å
		if text == "/start" || text == "start" {
			sendClassSelection(userID)
		} else if isClassSelection(text) {
			handleClassSelection(userID, text)
		} else {
			sendWelcomeMessage(userID)
		}
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ–º–∂–∞
	switch strings.ToLower(text) {
	case "/start", "start":
		sendMainMenu(userID)
	case "/stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "—Å—Ç–∞—Ç":
		sendStats(userID)
	case "/work", "—Ä–∞–±–æ—Ç–∞", "—Ä–∞–±–æ—Ç–∞—Ç—å":
		handleWork(userID)
	case "/feed", "–∫–æ—Ä–º–∏—Ç—å", "–µ–¥–∞":
		sendFoodMenu(userID)
	case "/event", "—Å–æ–±—ã—Ç–∏–µ", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ":
		handleRandomEvent(userID)
	case "/help", "–ø–æ–º–æ—â—å", "help":
		sendHelp(userID)
	default:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –µ–¥—ã
		if strings.HasPrefix(text, "–µ–¥–∞_") {
			handleFoodSelection(userID, text)
		} else {
			sendMainMenu(userID)
		}
	}
}

func isClassSelection(text string) bool {
	text = strings.ToLower(text)
	return text == "—Ç–∞—Ä–µ–ª–æ—á–Ω–∏–∫" || text == "—Ç–∞—Ä–µ–ª–∫–∞" || text == "tarelka" ||
		text == "–≤–µ—Ç–µ—Ä–∞–Ω" || text == "veteran" ||
		text == "–≥–∏–∫" || text == "geek" ||
		text == "–¥–æ—Å—Ç–∞–≤—â–∏–∫" || text == "delivery"
}

func sendWelcomeMessage(userID int64) {
	text := `üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö–∞—Ä–º–∞–Ω–Ω—ã–π –ë–æ–º–∂"!

–≠—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ –æ—Å—Ç—Ä—ã–π –ø—Ä–æ–µ–∫—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞. 
–í –∏–≥—Ä–µ —Ç—ã –±—É–¥–µ—à—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ—ë–º –±–æ–º–∂–µ, –ø–æ–º–æ–≥–∞—Ç—å –µ–º—É –≤ —ç—Ç–æ–º —Å—É—Ä–æ–≤–æ–º –º–∏—Ä–µ –∏ –Ω–µ –¥–∞–≤–∞—Ç—å –µ–º—É —É–º–µ—Ä–µ—Ç—å.

–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å —Å–≤–æ–µ–≥–æ –±–æ–º–∂–∞! üöÄ`

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func sendClassSelection(userID int64) {
	text := `üéØ –í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å —Å–≤–æ–µ–≥–æ –±–æ–º–∂–∞:

üçΩÔ∏è –¢–∞—Ä–µ–ª–æ—á–Ω–∏–∫ - –º–∞—Å—Ç–µ—Ä –ø–æ —Å–±–æ—Ä—É –µ–¥—ã –∏ —Ç–∞—Ä–µ–ª–æ–∫
üéñÔ∏è –í–µ—Ç–µ—Ä–∞–Ω - —É–≤–∞–∂–∞–µ–º—ã–π –≤ –±–æ–º–∂–æ–≤–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ  
üíª –ì–∏–∫ - –∑–Ω–∞–µ—Ç –≤—Å–µ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
üö≤ –î–æ—Å—Ç–∞–≤—â–∏–∫ - –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –≤–µ—á–Ω–æ –≥–æ–ª–æ–¥–Ω—ã–π

–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ç–∞—Ä–µ–ª–æ—á–Ω–∏–∫")`

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func handleClassSelection(userID int64, className string) {
	var class bomj.BomjClass

	switch strings.ToLower(className) {
	case "—Ç–∞—Ä–µ–ª–æ—á–Ω–∏–∫", "—Ç–∞—Ä–µ–ª–∫–∞", "tarelka":
		class = bomj.ClassTarelka
	case "–≤–µ—Ç–µ—Ä–∞–Ω", "veteran":
		class = bomj.ClassVeteran
	case "–≥–∏–∫", "geek":
		class = bomj.ClassGeek
	case "–¥–æ—Å—Ç–∞–≤—â–∏–∫", "delivery":
		class = bomj.ClassDelivery
	default:
		sendClassSelection(userID)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ–º–∂–∞
	newBomj := bomj.NewBomj(userID, class)
	storage.SaveBomj(newBomj)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	text := fmt.Sprintf(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å–æ–∑–¥–∞–ª –±–æ–º–∂–∞ –∫–ª–∞—Å—Å–∞ "%s"!

%s

–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–º–∂! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
üìä /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üíº /work - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É
üçΩÔ∏è /feed - –ø–æ–∫–æ—Ä–º–∏—Ç—å
üé≤ /event - —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
‚ùì /help - –ø–æ–º–æ—â—å

–£–¥–∞—á–∏ –≤ —ç—Ç–æ–º —Å—É—Ä–æ–≤–æ–º –º–∏—Ä–µ! üöÄ`,
		className, newBomj.GetClassDescription())

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func sendMainMenu(userID int64) {
	bomj := storage.GetBomj(userID)
	if bomj == nil {
		sendWelcomeMessage(userID)
		return
	}

	text := fmt.Sprintf(`üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

%s

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?
üíº /work - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É
üçΩÔ∏è /feed - –ø–æ–∫–æ—Ä–º–∏—Ç—å
üé≤ /event - —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
üìä /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚ùì /help - –ø–æ–º–æ—â—å`, bomj.GetStats())

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func sendStats(userID int64) {
	bomj := storage.GetBomj(userID)
	if bomj == nil {
		sendWelcomeMessage(userID)
		return
	}

	text := fmt.Sprintf(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–º–∂–∞:

%s

üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:
`, bomj.GetStats())

	for _, item := range bomj.Inventory {
		text += fmt.Sprintf("‚Ä¢ %s (x%d) - %d‚ÇΩ\n", item.Name, item.Quantity, item.Value)
	}

	if len(bomj.Inventory) == 0 {
		text += "–ü—É—Å—Ç–æ üò¢\n"
	}

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func handleWork(userID int64) {
	bomj := storage.GetBomj(userID)
	if bomj == nil {
		sendWelcomeMessage(userID)
		return
	}

	earnings, workType := bomj.Work()
	storage.SaveBomj(bomj)

	if earnings == 0 {
		text := fmt.Sprintf("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", workType)
		msg := tgbotapi.NewMessage(userID, text)
		bot.Send(msg)
		return
	}

	text := fmt.Sprintf(`üíº –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

%s

üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %d‚ÇΩ
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d
üçΩÔ∏è –ì–æ–ª–æ–¥: %d/%d

–ë–æ–º–∂ —É—Å—Ç–∞–ª, –Ω–æ –¥–æ–≤–æ–ª–µ–Ω! üòä`,
		workType, earnings, bomj.Health, bomj.MaxHealth, bomj.Hunger, bomj.MaxHunger)

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func sendFoodMenu(userID int64) {
	text := `üçΩÔ∏è –í—ã–±–µ—Ä–∏ –µ–¥—É –¥–ª—è –±–æ–º–∂–∞:

üçï –µ–¥–∞_–ø–∏—Ü—Ü–∞ - –ü–∏—Ü—Ü–∞ (—É–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 30, +15 –∑–¥–æ—Ä–æ–≤—å—è)
üçî –µ–¥–∞_–±—É—Ä–≥–µ—Ä - –ë—É—Ä–≥–µ—Ä (—É–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 25, +10 –∑–¥–æ—Ä–æ–≤—å—è)
ü•™ –µ–¥–∞_–±—É—Ç–µ—Ä–±—Ä–æ–¥ - –ë—É—Ç–µ—Ä–±—Ä–æ–¥ (—É–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 20, +8 –∑–¥–æ—Ä–æ–≤—å—è)
üçé –µ–¥–∞_—è–±–ª–æ–∫–æ - –Ø–±–ª–æ–∫–æ (—É–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 15, +5 –∑–¥–æ—Ä–æ–≤—å—è)
ü•ñ –µ–¥–∞_—Ö–ª–µ–± - –•–ª–µ–± (—É–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 10, +3 –∑–¥–æ—Ä–æ–≤—å—è)
üç∫ –µ–¥–∞_–ø–∏–≤–æ - –ü–∏–≤–æ (—É–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 5, -5 –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ +10 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)`

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func handleFoodSelection(userID int64, foodChoice string) {
	bomjObj := storage.GetBomj(userID)
	if bomjObj == nil {
		sendWelcomeMessage(userID)
		return
	}

	var food bomj.Item

	switch foodChoice {
	case "–µ–¥–∞_–ø–∏—Ü—Ü–∞":
		food = bomj.Item{ID: 101, Name: "–ü–∏—Ü—Ü–∞", Type: "food", Value: 30, Quantity: 1}
	case "–µ–¥–∞_–±—É—Ä–≥–µ—Ä":
		food = bomj.Item{ID: 102, Name: "–ë—É—Ä–≥–µ—Ä", Type: "food", Value: 25, Quantity: 1}
	case "–µ–¥–∞_–±—É—Ç–µ—Ä–±—Ä–æ–¥":
		food = bomj.Item{ID: 103, Name: "–ë—É—Ç–µ—Ä–±—Ä–æ–¥", Type: "food", Value: 20, Quantity: 1}
	case "–µ–¥–∞_—è–±–ª–æ–∫–æ":
		food = bomj.Item{ID: 104, Name: "–Ø–±–ª–æ–∫–æ", Type: "food", Value: 15, Quantity: 1}
	case "–µ–¥–∞_—Ö–ª–µ–±":
		food = bomj.Item{ID: 105, Name: "–•–ª–µ–±", Type: "food", Value: 10, Quantity: 1}
	case "–µ–¥–∞_–ø–∏–≤–æ":
		food = bomj.Item{ID: 106, Name: "–ü–∏–≤–æ", Type: "food", Value: 5, Quantity: 1}
	default:
		sendFoodMenu(userID)
		return
	}

	// –ö–æ—Ä–º–∏–º –±–æ–º–∂–∞
	success := bomjObj.Feed(food)
	storage.SaveBomj(bomjObj)

	if !success {
		text := "üòµ –ë–æ–º–∂ –Ω–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ –µ—Å—Ç—å! –û–Ω —É–∂–µ —Å—ã—Ç."
		msg := tgbotapi.NewMessage(userID, text)
		bot.Send(msg)
		return
	}

	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø–∏–≤–∞
	extraMessage := ""
	if foodChoice == "–µ–¥–∞_–ø–∏–≤–æ" {
		bomjObj.Health = max(0, bomjObj.Health-5)
		extraMessage = "\nüç∫ –ë–æ–º–∂ –≤—ã–ø–∏–ª –ø–∏–≤–æ! –ó–¥–æ—Ä–æ–≤—å–µ -5, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ +10! üéâ"
	}

	text := fmt.Sprintf(`üçΩÔ∏è –ë–æ–º–∂ –ø–æ–µ–ª %s!

‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d
üçΩÔ∏è –ì–æ–ª–æ–¥: %d/%d%s

–ë–æ–º–∂ –¥–æ–≤–æ–ª–µ–Ω! üòã`,
		food.Name, bomjObj.Health, bomjObj.MaxHealth, bomjObj.Hunger, bomjObj.MaxHunger, extraMessage)

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func handleRandomEvent(userID int64) {
	bomj := storage.GetBomj(userID)
	if bomj == nil {
		sendWelcomeMessage(userID)
		return
	}

	description, moneyChange := bomj.GetRandomEvent()
	storage.SaveBomj(bomj)

	text := fmt.Sprintf(`üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!

%s

üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–µ–Ω–µ–≥: %+d‚ÇΩ
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d
üçΩÔ∏è –ì–æ–ª–æ–¥: %d/%d

–ñ–∏–∑–Ω—å –±–æ–º–∂–∞ –ø–æ–ª–Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! üöÄ`,
		description, moneyChange, bomj.Health, bomj.MaxHealth, bomj.Hunger, bomj.MaxHunger)

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

func sendHelp(userID int64) {
	text := `‚ùì –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ "–ö–∞—Ä–º–∞–Ω–Ω—ã–π –ë–æ–º–∂"

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–º–∂–∞
/work - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É
/feed - –ø–æ–∫–æ—Ä–º–∏—Ç—å –±–æ–º–∂–∞
/event - —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üçΩÔ∏è –ï–¥–∞:
–û—Ç–ø—Ä–∞–≤—å "–µ–¥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ" —á—Ç–æ–±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –±–æ–º–∂–∞
–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: –ø–∏—Ü—Ü–∞, –±—É—Ä–≥–µ—Ä, –±—É—Ç–µ—Ä–±—Ä–æ–¥, —è–±–ª–æ–∫–æ, —Ö–ª–µ–±, –ø–∏–≤–æ

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å
‚Ä¢ –ö–æ—Ä–º–∏—Ç—å –±–æ–º–∂–∞ –Ω—É–∂–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ
‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

–£–¥–∞—á–∏ –≤ –∑–∞–±–æ—Ç–µ –æ —Å–≤–æ–µ–º –±–æ–º–∂–µ! üöÄ`

	msg := tgbotapi.NewMessage(userID, text)
	bot.Send(msg)
}

// Helper function
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
