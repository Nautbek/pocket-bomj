package bomj

import (
	"fmt"
	"math/rand"
	"time"
)

// BomjClass –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å –±–æ–º–∂–∞
type BomjClass string

const (
	ClassTarelka  BomjClass = "tarelka"  // –¢–∞—Ä–µ–ª–æ—á–Ω–∏–∫
	ClassVeteran  BomjClass = "veteran"  // –í–µ—Ç–µ—Ä–∞–Ω
	ClassGeek     BomjClass = "geek"     // –ì–∏–∫
	ClassDelivery BomjClass = "delivery" // –î–æ—Å—Ç–∞–≤—â–∏–∫
)

// Bomj –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–º–∂–∞
type Bomj struct {
	ID          int64     `json:"id"`
	UserID      int64     `json:"user_id"`
	Class       BomjClass `json:"class"`
	Name        string    `json:"name"`
	Level       int       `json:"level"`
	Experience  int       `json:"experience"`
	Health      int       `json:"health"`
	MaxHealth   int       `json:"max_health"`
	Hunger      int       `json:"hunger"`
	MaxHunger   int       `json:"max_hunger"`
	Money       int       `json:"money"`
	Reputation  int       `json:"reputation"`
	Inventory   []Item    `json:"inventory"`
	LastFed     time.Time `json:"last_fed"`
	LastWorked  time.Time `json:"last_worked"`
	CreatedAt   time.Time `json:"created_at"`
	LastUpdated time.Time `json:"last_updated"`
}

// Item –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
type Item struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Type     string `json:"type"`
	Value    int    `json:"value"`
	Quantity int    `json:"quantity"`
}

// NewBomj —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ–º–∂–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func NewBomj(userID int64, class BomjClass) *Bomj {
	now := time.Now()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
	names := []string{
		"–í–∞—Å—è–Ω", "–ü–µ—Ç—å–∫–∞", "–ö–æ–ª—è–Ω", "–°–µ—Ä—ã–π", "–ë–æ—Ä–æ–¥–∞—á", "–ö–æ—Å–æ–π", "–•—Ä–æ–º–æ–π", "–ö—Ä–∏–≤–æ–π",
		"–î–ª–∏–Ω–Ω—ã–π", "–ö–æ—Ä–æ—Ç–∫–∏–π", "–¢–æ–ª—Å—Ç—ã–π", "–•—É–¥–æ–π", "–ë—ã—Å—Ç—Ä—ã–π", "–ú–µ–¥–ª–µ–Ω–Ω—ã–π", "–£–º–Ω—ã–π", "–¢—É–ø–æ–π",
	}

	bomj := &Bomj{
		UserID:      userID,
		Class:       class,
		Name:        names[rand.Intn(len(names))],
		Level:       1,
		Experience:  0,
		Health:      100,
		MaxHealth:   100,
		Hunger:      0,
		MaxHunger:   100,
		Money:       0,
		Reputation:  0,
		Inventory:   []Item{},
		LastFed:     now,
		LastWorked:  now,
		CreatedAt:   now,
		LastUpdated: now,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
	bomj.setClassStats()

	return bomj
}

// setClassStats —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
func (b *Bomj) setClassStats() {
	switch b.Class {
	case ClassTarelka:
		b.MaxHealth = 120
		b.Health = 120
		b.MaxHunger = 80
		b.Reputation = 10
		b.Inventory = append(b.Inventory, Item{ID: 1, Name: "–¢–∞—Ä–µ–ª–∫–∞", Type: "weapon", Value: 5, Quantity: 1})

	case ClassVeteran:
		b.MaxHealth = 150
		b.Health = 150
		b.MaxHunger = 120
		b.Reputation = 20
		b.Inventory = append(b.Inventory, Item{ID: 2, Name: "–û—Ä–¥–µ–Ω", Type: "accessory", Value: 10, Quantity: 1})

	case ClassGeek:
		b.MaxHealth = 80
		b.Health = 80
		b.MaxHunger = 60
		b.Reputation = 5
		b.Inventory = append(b.Inventory, Item{ID: 3, Name: "–°–º–∞—Ä—Ç—Ñ–æ–Ω", Type: "device", Value: 15, Quantity: 1})

	case ClassDelivery:
		b.MaxHealth = 100
		b.Health = 100
		b.MaxHunger = 150
		b.Reputation = 0
		b.Inventory = append(b.Inventory, Item{ID: 4, Name: "–í–µ–ª–æ—Å–∏–ø–µ–¥", Type: "vehicle", Value: 20, Quantity: 1})
	}
}

// GetClassDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
func (b *Bomj) GetClassDescription() string {
	switch b.Class {
	case ClassTarelka:
		return "üçΩÔ∏è –ë–æ–º–∂-—Ç–∞—Ä–µ–ª–æ—á–Ω–∏–∫ - –º–∞—Å—Ç–µ—Ä –ø–æ —Å–±–æ—Ä—É –µ–¥—ã –∏ —Ç–∞—Ä–µ–ª–æ–∫. –ú–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –≤ —Å–∞–º—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö!"
	case ClassVeteran:
		return "üéñÔ∏è –ë–æ–º–∂-–≤–µ—Ç–µ—Ä–∞–Ω - —É–≤–∞–∂–∞–µ–º—ã–π –≤ –±–æ–º–∂–æ–≤–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ. –ò–º–µ–µ—Ç —Å–≤—è–∑–∏ –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–≥."
	case ClassGeek:
		return "üíª –ë–æ–º–∂-–≥–∏–∫ - –∑–Ω–∞–µ—Ç –≤—Å–µ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –∏—Ö —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å. –ú–∞—Å—Ç–µ—Ä –ø–æ –ø–æ–∏—Å–∫—É –∑–∞—Ä—è–¥–æ–∫."
	case ClassDelivery:
		return "üö≤ –ë–æ–º–∂-–¥–æ—Å—Ç–∞–≤—â–∏–∫ - –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –≤–µ—á–Ω–æ –≥–æ–ª–æ–¥–Ω—ã–π. –ú–æ–∂–µ—Ç –¥–æ—Å—Ç–∞–≤–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ!"
	default:
		return "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å –±–æ–º–∂–∞"
	}
}

// GetStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ–º–∂–∞
func (b *Bomj) GetStatus() string {
	healthStatus := "‚ù§Ô∏è"
	if b.Health < 30 {
		healthStatus = "üíî"
	} else if b.Health < 70 {
		healthStatus = "üñ§"
	}

	hungerStatus := "üòã"
	if b.Hunger > 80 {
		hungerStatus = "üòµ"
	} else if b.Hunger > 50 {
		hungerStatus = "üò´"
	}

	return healthStatus + " " + hungerStatus
}

// Feed –∫–æ—Ä–º–∏—Ç –±–æ–º–∂–∞
func (b *Bomj) Feed(food Item) bool {
	if b.Hunger >= b.MaxHunger {
		return false
	}

	hungerReduction := food.Value
	if food.Type == "food" {
		hungerReduction *= 2
	}

	b.Hunger = max(0, b.Hunger-hungerReduction)
	b.Health = min(b.MaxHealth, b.Health+food.Value/2)
	b.LastFed = time.Now()
	b.LastUpdated = time.Now()

	return true
}

// Work –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–º–∂–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
func (b *Bomj) Work() (int, string) {
	if time.Since(b.LastWorked) < time.Hour {
		return 0, "–ë–æ–º–∂ –µ—â–µ –Ω–µ –æ—Ç–¥–æ—Ö–Ω—É–ª –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–∞–±–æ—Ç—ã! üò¥"
	}

	if b.Hunger > 80 {
		return 0, "–ë–æ–º–∂ —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã! üò´"
	}

	if b.Health < 30 {
		return 0, "–ë–æ–º–∂ —Å–ª–∏—à–∫–æ–º –±–æ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã! ü§í"
	}

	// –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
	var earnings int
	var workType string

	switch b.Class {
	case ClassTarelka:
		workType = "—Å–æ–±–∏—Ä–∞–ª —Ç–∞—Ä–µ–ª–∫–∏ –∏ –µ–¥—É"
		earnings = rand.Intn(15) + 5
		b.Hunger = min(b.MaxHunger, b.Hunger+10)

	case ClassVeteran:
		workType = "–¥–∞–≤–∞–ª —Å–æ–≤–µ—Ç—ã –º–æ–ª–æ–¥—ã–º –±–æ–º–∂–∞–º"
		earnings = rand.Intn(20) + 10
		b.Reputation += 2

	case ClassGeek:
		workType = "–ø–æ–º–æ–≥–∞–ª —Å —Ç–µ—Ö–Ω–∏–∫–æ–π"
		earnings = rand.Intn(25) + 15
		b.Experience += 5

	case ClassDelivery:
		workType = "–¥–æ—Å—Ç–∞–≤–ª—è–ª –ø–æ—Å—ã–ª–∫–∏"
		earnings = rand.Intn(30) + 20
		b.Hunger = min(b.MaxHunger, b.Hunger+20)
	}

	b.Money += earnings
	b.Experience += earnings / 5
	b.Health = max(0, b.Health-5)
	b.LastWorked = time.Now()
	b.LastUpdated = time.Now()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	b.checkLevelUp()

	return earnings, workType
}

// checkLevelUp –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
func (b *Bomj) checkLevelUp() {
	requiredExp := b.Level * 100

	if b.Experience >= requiredExp {
		b.Level++
		b.Experience -= requiredExp
		b.MaxHealth += 10
		b.Health = b.MaxHealth
		b.MaxHunger += 5
		b.Reputation += 5
	}
}

// GetRandomEvent –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –±–æ–º–∂–∞
func (b *Bomj) GetRandomEvent() (string, int) {
	events := []struct {
		description  string
		moneyChange  int
		healthChange int
		hungerChange int
	}{
		{"–ù–∞—à–µ–ª –±—Ä–æ—à–µ–Ω–Ω—É—é –µ–¥—É! üçï", 0, 5, -20},
		{"–ü–æ–º–æ–≥ —Å—Ç–∞—Ä—É—à–∫–µ –¥–æ–Ω–µ—Å—Ç–∏ —Å—É–º–∫–∏! üëµ", 5, 0, 10},
		{"–ü–æ–ø–∞–ª –ø–æ–¥ –¥–æ–∂–¥—å! ‚òî", 0, -10, 0},
		{"–ù–∞—à–µ–ª –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ! ü™ô", 3, 0, 0},
		{"–ü–æ–¥–µ–ª–∏–ª—Å—è –µ–¥–æ–π —Å –¥—Ä—É–≥–æ–º! ü§ù", -2, 5, 15},
		{"–ü–æ–ø–∞–ª –≤ –¥—Ä–∞–∫—É! üëä", 0, -15, 0},
		{"–í—ã–∏–≥—Ä–∞–ª –≤ –∫–∞—Ä—Ç—ã! üÉè", 8, 0, 0},
		{"–ü—Ä–æ–∏–≥—Ä–∞–ª –≤ –∫–∞—Ä—Ç—ã! üò≠", -5, 0, 0},
		{"–ù–∞—à–µ–ª –∑–∞—Ä—è–¥–∫—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞! üîå", 0, 0, 0},
		{"–ü–æ–º—ã–ª—Å—è –≤ —Ñ–æ–Ω—Ç–∞–Ω–µ! üöø", 0, 10, 0},
	}

	event := events[rand.Intn(len(events))]

	b.Money += event.moneyChange
	b.Health = max(0, min(b.MaxHealth, b.Health+event.healthChange))
	b.Hunger = max(0, min(b.MaxHunger, b.Hunger+event.hungerChange))

	return event.description, event.moneyChange
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–º–∂–∞
func (b *Bomj) GetStats() string {
	return fmt.Sprintf(`
üèÜ %s (–£—Ä–æ–≤–µ–Ω—å %d)
üí∞ –î–µ–Ω—å–≥–∏: %d‚ÇΩ
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d
üçΩÔ∏è –ì–æ–ª–æ–¥: %d/%d
‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: %d
üìà –û–ø—ã—Ç: %d/%d
%s
`, b.Name, b.Level, b.Money, b.Health, b.MaxHealth, b.Hunger, b.MaxHunger, b.Reputation, b.Experience, b.Level*100, b.GetStatus())
}

// Helper functions
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
